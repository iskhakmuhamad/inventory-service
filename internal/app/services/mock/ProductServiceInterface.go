// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "github.com/iskhakmuhamad/inventory-service/internal/app/models"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/iskhakmuhamad/inventory-service/pkg/utils"
)

// ProductServiceInterface is an autogenerated mock type for the ProductServiceInterface type
type ProductServiceInterface struct {
	mock.Mock
}

type ProductServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductServiceInterface) EXPECT() *ProductServiceInterface_Expecter {
	return &ProductServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function with given fields: product
func (_m *ProductServiceInterface) CreateProduct(product *models.Product) error {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductServiceInterface_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type ProductServiceInterface_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - product *models.Product
func (_e *ProductServiceInterface_Expecter) CreateProduct(product interface{}) *ProductServiceInterface_CreateProduct_Call {
	return &ProductServiceInterface_CreateProduct_Call{Call: _e.mock.On("CreateProduct", product)}
}

func (_c *ProductServiceInterface_CreateProduct_Call) Run(run func(product *models.Product)) *ProductServiceInterface_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Product))
	})
	return _c
}

func (_c *ProductServiceInterface_CreateProduct_Call) Return(_a0 error) *ProductServiceInterface_CreateProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductServiceInterface_CreateProduct_Call) RunAndReturn(run func(*models.Product) error) *ProductServiceInterface_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProduct provides a mock function with given fields: id
func (_m *ProductServiceInterface) DeleteProduct(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductServiceInterface_DeleteProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProduct'
type ProductServiceInterface_DeleteProduct_Call struct {
	*mock.Call
}

// DeleteProduct is a helper method to define mock.On call
//   - id int
func (_e *ProductServiceInterface_Expecter) DeleteProduct(id interface{}) *ProductServiceInterface_DeleteProduct_Call {
	return &ProductServiceInterface_DeleteProduct_Call{Call: _e.mock.On("DeleteProduct", id)}
}

func (_c *ProductServiceInterface_DeleteProduct_Call) Run(run func(id int)) *ProductServiceInterface_DeleteProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *ProductServiceInterface_DeleteProduct_Call) Return(_a0 error) *ProductServiceInterface_DeleteProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductServiceInterface_DeleteProduct_Call) RunAndReturn(run func(int) error) *ProductServiceInterface_DeleteProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllProducts provides a mock function with no fields
func (_m *ProductServiceInterface) GetAllProducts() ([]models.ProductWithCategory, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllProducts")
	}

	var r0 []models.ProductWithCategory
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.ProductWithCategory, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.ProductWithCategory); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ProductWithCategory)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductServiceInterface_GetAllProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProducts'
type ProductServiceInterface_GetAllProducts_Call struct {
	*mock.Call
}

// GetAllProducts is a helper method to define mock.On call
func (_e *ProductServiceInterface_Expecter) GetAllProducts() *ProductServiceInterface_GetAllProducts_Call {
	return &ProductServiceInterface_GetAllProducts_Call{Call: _e.mock.On("GetAllProducts")}
}

func (_c *ProductServiceInterface_GetAllProducts_Call) Run(run func()) *ProductServiceInterface_GetAllProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProductServiceInterface_GetAllProducts_Call) Return(_a0 []models.ProductWithCategory, _a1 error) *ProductServiceInterface_GetAllProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductServiceInterface_GetAllProducts_Call) RunAndReturn(run func() ([]models.ProductWithCategory, error)) *ProductServiceInterface_GetAllProducts_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaginatedProductsWithMeta provides a mock function with given fields: page, limit
func (_m *ProductServiceInterface) GetPaginatedProductsWithMeta(page int, limit int) ([]models.ProductWithCategory, *utils.Meta, error) {
	ret := _m.Called(page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedProductsWithMeta")
	}

	var r0 []models.ProductWithCategory
	var r1 *utils.Meta
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]models.ProductWithCategory, *utils.Meta, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []models.ProductWithCategory); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ProductWithCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) *utils.Meta); ok {
		r1 = rf(page, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.Meta)
		}
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProductServiceInterface_GetPaginatedProductsWithMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaginatedProductsWithMeta'
type ProductServiceInterface_GetPaginatedProductsWithMeta_Call struct {
	*mock.Call
}

// GetPaginatedProductsWithMeta is a helper method to define mock.On call
//   - page int
//   - limit int
func (_e *ProductServiceInterface_Expecter) GetPaginatedProductsWithMeta(page interface{}, limit interface{}) *ProductServiceInterface_GetPaginatedProductsWithMeta_Call {
	return &ProductServiceInterface_GetPaginatedProductsWithMeta_Call{Call: _e.mock.On("GetPaginatedProductsWithMeta", page, limit)}
}

func (_c *ProductServiceInterface_GetPaginatedProductsWithMeta_Call) Run(run func(page int, limit int)) *ProductServiceInterface_GetPaginatedProductsWithMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *ProductServiceInterface_GetPaginatedProductsWithMeta_Call) Return(_a0 []models.ProductWithCategory, _a1 *utils.Meta, _a2 error) *ProductServiceInterface_GetPaginatedProductsWithMeta_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProductServiceInterface_GetPaginatedProductsWithMeta_Call) RunAndReturn(run func(int, int) ([]models.ProductWithCategory, *utils.Meta, error)) *ProductServiceInterface_GetPaginatedProductsWithMeta_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductByID provides a mock function with given fields: id
func (_m *ProductServiceInterface) GetProductByID(id int) (*models.ProductWithCategory, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 *models.ProductWithCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.ProductWithCategory, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.ProductWithCategory); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ProductWithCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductServiceInterface_GetProductByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductByID'
type ProductServiceInterface_GetProductByID_Call struct {
	*mock.Call
}

// GetProductByID is a helper method to define mock.On call
//   - id int
func (_e *ProductServiceInterface_Expecter) GetProductByID(id interface{}) *ProductServiceInterface_GetProductByID_Call {
	return &ProductServiceInterface_GetProductByID_Call{Call: _e.mock.On("GetProductByID", id)}
}

func (_c *ProductServiceInterface_GetProductByID_Call) Run(run func(id int)) *ProductServiceInterface_GetProductByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *ProductServiceInterface_GetProductByID_Call) Return(_a0 *models.ProductWithCategory, _a1 error) *ProductServiceInterface_GetProductByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductServiceInterface_GetProductByID_Call) RunAndReturn(run func(int) (*models.ProductWithCategory, error)) *ProductServiceInterface_GetProductByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function with given fields: product
func (_m *ProductServiceInterface) UpdateProduct(product *models.Product) error {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductServiceInterface_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type ProductServiceInterface_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - product *models.Product
func (_e *ProductServiceInterface_Expecter) UpdateProduct(product interface{}) *ProductServiceInterface_UpdateProduct_Call {
	return &ProductServiceInterface_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", product)}
}

func (_c *ProductServiceInterface_UpdateProduct_Call) Run(run func(product *models.Product)) *ProductServiceInterface_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Product))
	})
	return _c
}

func (_c *ProductServiceInterface_UpdateProduct_Call) Return(_a0 error) *ProductServiceInterface_UpdateProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductServiceInterface_UpdateProduct_Call) RunAndReturn(run func(*models.Product) error) *ProductServiceInterface_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductServiceInterface creates a new instance of ProductServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductServiceInterface {
	mock := &ProductServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
